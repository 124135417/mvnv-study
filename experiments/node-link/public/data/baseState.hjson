// This config file specifies how the visualization should be rendered, along with what task is associated to this config; 
// For attributes that are not boolean flags or paths to a file, possible values are specified in [] in the comment line above each attribute. 

{ 
  // Type of visualization - can be node-link [NL], adjacency matrix [AM] or juxtaposed [JX]
  vis: NL 

  // specify the path to the directed graph
  directedGraph: ../public/data/network_small_directed_layout3.json

  // specify the path to the undirected graph
  undirectedGraph: ../public/data/network_small_undirected.json

  // boolean flag, which if set to true uses the directed Graph
  isDirected: true

  // boolean flag indicating whether to use fixed positions already determined in the graph file above.
  // If set to false, code will run a force-directed simulation to position nodes.  
  fixedPositions: false
  
  //Setting for which attributes to encode and how
  attr:
  {
    //Array of colors to use when encoding groups of bars on different scales in nested bar charts.
    barColors:
    [
      "#2d2d2d"
      "#d67205"
      "#777777"
      "#706842"
    ]
    //Dictionary of scales to be used for bars - (make sure there is at least one color in 'barColors' above for each scale in this dict) 
    bars:
    {
      scale1:
      {
        //List of attributes that will use this scale
        attrs:
        [
          followers_count
          friends_count
        ]
        //Option to hard code the domain for this scale. If set to 'null', code will set the domain based on d3.extent() of the attributes specified above. 
        domain:
        [
          0
          2000
        ]
      }
      scale2:
      {
        attrs:
        [
          statuses_count
        ]
        domain: null
      }
      scale3:
      {
        attrs:
        [
          favourites_count
        ]
        domain: null
      }
    }
    // Array of attribute/color combination for categorical attributes to be encoded with circles in the embedded node visualizations.
    circles:
    [
      {
        //Name of categorical attribute
        attr: type
        //Array of colors to assign the unique values in the attribute defined above. make sure there are enough colors for each categorical attribute.
        colors:
        [
          "#a88e69"
          "#68aa73"
        ]
      }
      {
        attr: type
        colors:
        [
          "#a88e69"
          "#68aa73"
        ]
      }
    ]
    //Array of edge types to display.  
    displayEdgeTypes:
    [
      mentions
      retweets
    ]
    //Boolean flag that determines whether nested bar charts + categorical circles are rendered. 
    // If set to true, any attribute assigned to nodeFill is removed and node fills default to the noNodeFill color defined below.
    // If set to false, nodes are drawn as circles (i.e nodeIsRect is set to false)
    drawBars: false

    // Which attribute to encode on edge color
    edgeColor: type

    //Which attribute to encode on edge width
    edgeWidth: count

    //Which attribute to encode as the node label
    labelAttr: screen_name

    //If no attribute is assigned to edge color, determines the 'neutral' edge color
    noEdgeColor: white

    //If no attribute is assigned to node fill, determines the'neutral' node color.
    noNodeFill: white

    //If no attribute is assigned to node stroke, determines the 'neutral' node stroke.
    noNodeStroke: white

    //Which attribute to encode in the node fill. *If drawBars is set to true, this setting will be overriden and set as 'null'
    nodeFill: type

    //Which attribute to encode in the node Size.
    nodeSize: null

    //option to set domain for the scale used for the nodeSize. Only matters if nodeSize attribute is set above.
    nodeSizeScale:
    {
      clamp: true
      domain:
      [
        0
        2000
      ]
    }

    // Set attribute to encode in the node stroke
    nodeStroke: type

    // Set the color used to highlight user selected nodes;  
    selectedColor: "#ea9b0f"

    // Set whether user selected nodes should highlight the [stroke] or the [fill] of the node. 
    // If selectedColor attribute above is not set, will default to nodeFill attribute for [fill] and nodeStroke attribute for [stroke]. 
    selectedNodes: stroke

    //Determines whether node labels should [always] be shown or only on [hover]  or [click]
    showNodeLabels: always 
  }

  //Set of configuration for user interaction
  interaction:
  {
    //Determines whether users can drag nodes
    draggableNodes: true

    //Determines whether there are tooltips on edges
    edgeTooltip: false

    //Determines whether there are tooltips on nodes
    nodeTooltip: false

    //Determines whether multiple edges can be selected
    multiEdgeSelection: false

    //Determines whether multiple nodes can be selected
    multiNodeSelection: true

    //Determines what happens when a user clicks on an edge: [highlightNeighbors] / [null]
    onEdgeClick: null

    //Determines what happens when a user clicks on a node: [highlightNeighbors] / [highlightNode]
    onNodeClick: highlightNeighbors
  }
  
  //Set of configurations for the graph after user interaction
  state:
  {
    //Array of ids for nodes that have been selected
    selectedNodes: []
  }

  // Set of configurations for node styles (these are styles that might change between trials, and therefore are not defined in a .css file) 
  style:
  {
    //Array of colors used for edge color encoding
    edgeColors:
    [
      "#427d9b"
      "#88419d"
    ]
    //Array of colors used for node fill/stroke encoding\
    nodeColors:
    [
      "#a88e69"
      "#68aa73"
    ]
    //Node height in pixels
    nodeHeight: 30
  
    //Node width in pixels;
    nodeWidth: 50

    //If set to true, rect rx and ry are set to 2 for slightly rounded corners, if set to false, they are set to the radius of 
    // the marker in order to emulate a circle; 
    nodeIsRect: true
  }

}
